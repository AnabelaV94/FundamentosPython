


import pandas as pd
#from thefuzz import process  

# ðŸ“Œ 1. Carregar a base de referÃªncia dos associados (com Nome_Entidade e NIF)
df_associados = pd.read_excel("C:\\Users\\Anabela Veiga\\Desktop\\HCP - 06.11.23.xlsx")
print("ðŸ“„ df_associados (Associados) carregado com sucesso!")
print(df_associados.head())  # Mostra as 5 primeiras linhas

# ðŸ“Œ 2. Carregar a lista de inscritos do evento (com Nome_Entidade)
df_evento = pd.read_excel("C:\\Users\\Anabela Veiga\\Desktop\\DIRETÃ“RIO_Associados_janeiro2025.xlsx")  
print("ðŸ“„ df_evento (Evento) carregado com sucesso!")
print(df_evento.head())  # Mostra as 5 primeiras linhas

# Criar um dicionÃ¡rio {Nome_Entidade: NIF} para referÃªncia
associados_dict = dict(zip(df_associados["Nome_Entidade"], df_associados["NIF"]))

# ðŸ“Œ 3. FunÃ§Ã£o para encontrar a melhor correspondÃªncia usando fuzzy matching
#def encontrar_nif(nome):
    #match, score = process.extractOne(nome, associados_dict.keys())  # Melhor correspondÃªncia
    #if score > 80:  # Se a similaridade for maior que 80%
    #    return associados_dict[match]  # Retorna o NIF correspondente
   # return None  # Caso contrÃ¡rio, retorna None (valor em branco no Excel)

# ðŸ“Œ 4. Aplicar a funÃ§Ã£o para adicionar a coluna NIF
#df_evento["NIF"] = df_evento["Nome_Entidade"].apply(encontrar_nif)

# ðŸ“Œ 5. Adicionar a coluna "Associado" (Sim se tiver NIF, NÃ£o se estiver em branco)
#df_evento["Associado"] = df_evento["NIF"].apply(lambda x: "Sim" if pd.notna(x) else "NÃ£o")

# ðŸ“Œ 6. Salvar os resultados
#df_evento.to_excel("evento_com_nif.xlsx", index=False)

#print("Processo concluÃ­do! Arquivo salvo como 'evento_com_nif.xlsx'.")
